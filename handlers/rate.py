import datetime
import requests
from typing import List
from re import match

from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.dispatcher.filters import CommandStart

from image_app import create_img


async def start(message: Message):
    await message.answer(
        "üìâ<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
         "‚ñπ /d (/day) - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å\n"
         "‚ñπ /w (/week) - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é\n"
         "‚ñπ /m (/month) - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü"
    )


async def search(coins: list, days: int) -> List[dict]:
    coins_data = []
    for coin in coins:
        # –ü–æ–ª—É—á–∞–µ–º id, —Ç–æ–∫–µ–Ω, –∏–º—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
        coin_info = requests.get(
            f"https://api.coingecko.com/api/v3/search",
            params={"query": coin}
        ).json()
        if coin_info['coins']:
            coins_data.append(coin_info['coins'][0])

    if coins_data:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã
        params = {
            "ids": ",".join([coin['id'] for coin in coins_data]),
            "vs_currencies": "usd"
        }
        coins_price = requests.get(f"https://api.coingecko.com/api/v3/simple/price", params=params).json()
        # –°–æ–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ –∏ –æ –µ–µ —Ü–µ–Ω–µ
        for count, coin in enumerate(coins_data):
            # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –≤ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            start_date = datetime.date.today() - datetime.timedelta(days=days)
            start_date = f"{start_date.day}-{start_date.month}-{start_date.year}"
            old_price = requests.get(
                f"https://api.coingecko.com/api/v3/coins/{coin['id']}/history?date={start_date}"
            ).json()
            old_price = old_price['market_data']['current_price']['usd']
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            change = (coins_price[coin['id']]['usd'] - old_price) / (old_price / 100)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–∞–Ω–Ω—ã—Ö
            coins_price[coin['id']].update({"change": change})
            coins_data[count].update(coins_price[coin['id']])
        return coins_data


async def main_func(message: Message, days: int = 30):
    coins = message.text.replace(match(r"/\w+\b", message.text).group(0), "")[1:]  # —É–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if coins:
        coins = coins.split(", ")  # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –º–æ–Ω–µ—Ç–∞–º–∏, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if len(coins) > 5:
            await message.answer("‚ùó –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–∑")
        else:
            coins_data = await search(coins, days=days)
            if coins_data:
                img = await create_img(coins_data, days=days)
                await message.answer_photo(photo=img)
            else:
                await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
    else:
        await message.answer("‚ùó –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é! –ù–∞–ø—Ä–∏–º–µ—Ä: /day bitcoin, ethereum")


async def day_rate(message: Message):
    await main_func(message, 1)


async def week_rate(message: Message):
    await main_func(message, 7)


async def month_rate(message: Message):
    await main_func(message, 31)


def register_handlers_users(dp: Dispatcher):
    dp.register_message_handler(start, CommandStart())
    dp.register_message_handler(day_rate, commands=["d", "day"])
    dp.register_message_handler(week_rate, commands=["w", "week"])
    dp.register_message_handler(month_rate, commands=["m", "month"])
